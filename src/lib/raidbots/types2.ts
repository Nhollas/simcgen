// Generated by ts-to-zod
import { z } from "zod"

export const raidbotsItemSchema = z.object({
  equipped: z.boolean().optional(),
  id: z.number(),
  bonus_id: z.string(),
  name: z.string(),
  icon: z.string(),
  quality: z.number(),
  itemClass: z.number(),
  itemSubClass: z.number(),
  inventoryType: z.number(),
  itemLevel: z.number(),
  itemSetId: z.number().optional(),
  allowableClasses: z.array(z.number()).optional(),
  enchant_id: z.string().optional(),
  context: z.string().optional(),
  bonusLists: z.array(z.number()).optional(),
  stats: z.array(
    z.object({
      id: z.number(),
      alloc: z.number(),
    }),
  ),
  sources: z
    .array(
      z.object({
        instanceId: z.number(),
        encounterId: z.number(),
      }),
    )
    .optional(),
  expansion: z.number(),
  baseItemLevel: z.number(),
  socketInfo: z.object({
    PRISMATIC: z
      .object({
        type: z.string(),
        staticSlots: z.number(),
        dynamicSlots: z.number(),
        filled: z.number(),
        total: z.number(),
        gems: z.array(
          z.object({
            slot: z.string(),
            shortName: z.string(),
            group: z.string(),
            preferred: z.object({
              roles: z.array(z.string()),
            }),
            id: z.number(),
            displayName: z.string(),
            spellIcon: z.string(),
            itemId: z.number(),
            itemName: z.string(),
            itemIcon: z.string(),
            quality: z.number(),
            expansion: z.number(),
            craftingQuality: z.number(),
            tokenizedName: z.string(),
            socketType: z.number(),
            stats: z.array(
              z.object({
                type: z.string(),
                amount: z.number(),
              }),
            ),
            key: z.string(),
            name: z.string(),
            type: z.string(),
            dps: z.boolean(),
          }),
        ),
        gemIds: z.array(z.number()),
        hasUnique: z.boolean(),
      })
      .optional(),
  }),
  upgrade: z
    .object({
      level: z.number(),
      max: z.number(),
      group: z.number(),
      name: z.string(),
      costs: z.array(
        z.object({
          mask_inv_type: z.number(),
          flags: z.number(),
          amounts: z.array(
            z.object({
              currencyId: z.number(),
              amount: z.number(),
              name: z.string(),
              icon: z.string(),
            }),
          ),
        }),
      ),
      bonusId: z.number(),
      itemLevel: z.number(),
      highWatermarkDiscounts: z.array(
        z.object({
          type: z.string(),
          id: z.number(),
          scaling: z.number(),
          accountWide: z.boolean(),
        }),
      ),
      seasonId: z.number(),
    })
    .optional(),
  profession: z
    .object({
      id: z.number(),
      recipeSpellId: z.number(),
      optionalCraftingSlots: z.array(
        z.object({
          id: z.number(),
          count: z.number(),
          recraftCount: z.number(),
        }),
      ),
    })
    .optional(),
  unique_id: z.string(),
  setPieces: z.array(z.string()).optional(),
  gem_id: z.string().optional(),
})

export const raidbotsGearOutputSchema = z.object({
  back: z.array(raidbotsItemSchema),
  chest: z.array(raidbotsItemSchema),
  feet: z.array(raidbotsItemSchema),
  hands: z.array(raidbotsItemSchema),
  head: z.array(raidbotsItemSchema),
  legs: z.array(raidbotsItemSchema),
  main_hand: z.array(raidbotsItemSchema),
  neck: z.array(raidbotsItemSchema),
  off_hand: z.array(raidbotsItemSchema),
  rings: z.array(raidbotsItemSchema),
  shoulder: z.array(raidbotsItemSchema),
  trinkets: z.array(raidbotsItemSchema),
  waist: z.array(raidbotsItemSchema),
  wrist: z.array(raidbotsItemSchema),
})
